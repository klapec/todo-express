(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _model = require('./model');

var _model2 = _interopRequireDefault(_model);

var _view = require('./view');

var _view2 = _interopRequireDefault(_view);

var _controller = require('./controller');

var _controller2 = _interopRequireDefault(_controller);

var model = new _model2['default']();
var view = new _view2['default']();
var controller = new _controller2['default'](model, view);

var Todo = (function () {
  function Todo() {
    _classCallCheck(this, Todo);

    this.model = model;
    this.view = view;
    this.controller = controller;
  }

  _createClass(Todo, [{
    key: 'init',
    value: function init() {
      this.controller.bindAll();
    }
  }]);

  return Todo;
})();

var todo = new Todo();
todo.init();

},{"./controller":2,"./model":3,"./view":4}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Controller = (function () {
  function Controller(model, view) {
    _classCallCheck(this, Controller);

    this.model = model;
    this.view = view;
  }

  _createClass(Controller, [{
    key: 'bindAll',
    value: function bindAll() {
      var _this = this;

      // Checking if the task-list element exists = we're on /tasks
      if (this.view.taskList) {
        this.view.bind('init');
        this.view.bind('addTask', function (opts) {
          _this.addTask(opts.title);
        });
        this.view.bind('editTask');
        this.view.bind('editTaskDone', function (opts) {
          _this.editTaskDone(opts.id, opts.title, opts.oldVal);
        });
        this.view.bind('editTaskCancel');
        this.view.bind('removeTask', function (opts) {
          _this.removeTask(opts);
        });
        this.view.bind('toggleTask', function (opts) {
          _this.toggleTask(opts.id, opts.completed);
        });
        this.view.bind('removeCompleted', function (opts) {
          _this.removeTask(opts);
        });
      }
    }
  }, {
    key: 'addTask',
    value: function addTask(title) {
      if (title.trim() === '') {
        return;
      }

      var self = this;
      self.model.create(title, function (res) {
        var response = JSON.parse(res);
        self.view.render('addTask', {
          err: response.err,
          id: response.id,
          title: title
        });
      });
    }
  }, {
    key: 'editTaskDone',
    value: function editTaskDone(id, title, oldVal) {
      var self = this;
      if (title.trim() && title !== oldVal) {
        self.model.update(id, { title: title }, function (res) {
          var response = JSON.parse(res);
          self.view.render('editTaskDone', {
            err: response.err,
            id: response.id,
            title: response.title
          });
        });
      } else {
        self.view.render('editTaskDone', { id: id, title: oldVal });
      }
    }
  }, {
    key: 'removeTask',
    value: function removeTask(opts) {
      var self = this;
      var query = '';

      if (opts.completed) {
        (function () {
          var arr = [];
          Array.prototype.forEach.call(opts.completed, function (v) {
            arr.push(v.dataset.id);
          });
          query = arr.join('&');
        })();
      } else {
        query = opts.id;
      }

      self.model.remove(query, function (res) {
        var response = JSON.parse(res);
        self.view.render('removeTask', {
          err: response.err,
          query: response.query
        });
      });
    }
  }, {
    key: 'toggleTask',
    value: function toggleTask(id, completed) {
      var self = this;
      self.model.update(id, { completed: completed }, function (res) {
        var response = JSON.parse(res);
        self.view.render('toggleTask', {
          err: response.err,
          id: id,
          completed: response.completed
        });
      });
    }
  }]);

  return Controller;
})();

exports['default'] = Controller;
module.exports = exports['default'];

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Model = (function () {
  function Model() {
    _classCallCheck(this, Model);
  }

  _createClass(Model, [{
    key: 'create',
    value: function create(title, cb) {
      var xhr = new XMLHttpRequest();
      xhr.onload = function () {
        cb(this.responseText);
      };
      xhr.open('post', '/tasks', true);
      xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
      xhr.send(JSON.stringify({ title: title }));
    }
  }, {
    key: 'update',
    value: function update(id, data, cb) {
      var xhr = new XMLHttpRequest();
      xhr.onload = function () {
        cb(this.responseText);
      };
      xhr.open('put', '/tasks/' + id, true);
      xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
      xhr.send(JSON.stringify(data));
    }
  }, {
    key: 'remove',
    value: function remove(query, cb) {
      var xhr = new XMLHttpRequest();
      xhr.onload = function () {
        cb(this.responseText);
      };
      xhr.open('delete', '/tasks/' + query, true);
      xhr.send();
    }
  }]);

  return Model;
})();

exports['default'] = Model;
module.exports = exports['default'];

},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var qs = function qs(selector, scope) {
  return (scope || document).querySelector(selector);
};

var qsa = function qsa(selector, scope) {
  return (scope || document).querySelectorAll(selector);
};

var parent = function parent(_x2, _x3) {
  var _again = true;

  _function: while (_again) {
    var element = _x2,
        tagName = _x3;
    _again = false;

    if (!element.parentNode) {
      return false;
    }
    if (element.parentNode.tagName.toLowerCase() === tagName.toLowerCase()) {
      return element.parentNode;
    }
    _x2 = element.parentNode;
    _x3 = tagName;
    _again = true;
    continue _function;
  }
};

var on = function on(target, type, callback, useCapture) {
  if (typeof type == 'object') {
    type.forEach(function (v) {
      target.addEventListener(v, callback, !!useCapture);
    });
  } else {
    target.addEventListener(type, callback, !!useCapture);
  }
};

var delegate = function delegate(target, selector, type, handler) {
  function dispatchEvent(event) {
    var targetElement = event.target;
    var potentialElements = qsa(selector, target);
    var hasMatch = Array.prototype.indexOf.call(potentialElements, targetElement) >= 0;

    if (hasMatch) {
      handler.call(targetElement, event);
    }
  }

  var useCapture = type === 'blur' || type === 'focus';
  on(target, type, dispatchEvent, useCapture);
};

var View = (function () {
  function View() {
    _classCallCheck(this, View);

    this.ENTER_KEY = 13;
    this.ESCAPE_KEY = 27;

    this.addTaskInput = qs('.add-task__name');
    this.addTaskButton = qs('.add-task__button');
    this.taskList = qs('.task-list');
    this.taskListCounter = qs('.task-counter');
    this.taskListError = qs('.task-list__error');
    this.taskCounter = qs('.task-counter');
    this.clearCompleted = qs('.clear-completed');

    this.oldValCache = '';
  }

  _createClass(View, [{
    key: 'itemId',
    value: function itemId(element) {
      var li = parent(element, 'li');
      return li.dataset.id;
    }
  }, {
    key: 'clearCompletedButton',
    value: function clearCompletedButton(visible) {
      this.clearCompleted.style.display = visible ? 'block' : 'none';
    }
  }, {
    key: 'itemCounter',
    value: function itemCounter(completed) {
      var tasksCompleted = qsa('.completed');
      var number = this.taskList.children.length - tasksCompleted.length;
      var plural = number === 1 ? '' : 's';

      if (completed) {
        return tasksCompleted;
      }

      this.clearCompletedButton(tasksCompleted.length);
      this.taskListCounter.textContent = number + ' task' + plural + ' left';
    }
  }, {
    key: 'displayError',
    value: function displayError() {
      this.taskListError.style.display = 'block';
    }
  }, {
    key: 'bind',
    value: function bind(event, handler) {
      var self = this;

      if (event === 'init') {
        on(document, 'DOMContentLoaded', function () {
          self.render('init');
        });
      }

      if (event === 'addTask') {
        on(self.addTaskInput, 'keypress', function (e) {
          if (e.keyCode === self.ENTER_KEY) {
            var title = this.value;
            handler({ title: title });
          }
        });

        on(self.addTaskButton, ['mouseup', 'keypress'], function () {
          var title = self.addTaskInput.value;
          handler({ title: title });
        });
      }

      if (event === 'editTask') {
        delegate(self.taskList, '.task-list__item__name', 'dblclick', function () {
          self.render('editTask', { id: self.itemId(this) });
        });
      } else if (event === 'editTaskDone') {
        delegate(self.taskList, '.task-list__item--edit', 'blur', function () {
          if (!this.dataset.iscanceled) {
            handler({
              id: self.itemId(this),
              title: this.value,
              oldVal: self.oldValCache
            });
          }
        });

        delegate(self.taskList, '.task-list__item--edit', 'keypress', function (e) {
          if (e.keyCode === self.ENTER_KEY) {
            this.blur();
          }
        });
      } else if (event === 'editTaskCancel') {
        delegate(self.taskList, '.task-list__item--edit', 'keyup', function (event) {
          if (event.keyCode === self.ESCAPE_KEY) {
            this.dataset.iscanceled = true;
            this.blur();

            self.render('editTaskDone', {
              id: self.itemId(this),
              title: self.oldValCache
            });
          }
        });
      } else if (event === 'removeTask') {
        delegate(self.taskList, '.task-list__item__delete', 'click', function () {
          handler({ id: self.itemId(this) });
        });
      } else if (event === 'toggleTask') {
        delegate(self.taskList, '.task-list__item__toggle', 'click', function () {
          var checked = undefined;
          if (this.className.search(/checked/) !== -1) {
            checked = false;
            this.className = 'task-list__item__toggle';
          } else {
            checked = true;
            this.className += ' checked';
          }
          handler({
            id: self.itemId(this),
            completed: checked
          });
        });
      } else if (event === 'removeCompleted') {
        on(self.clearCompleted, 'click', function () {
          var completed = self.itemCounter(true);
          handler({ completed: completed });
        });
      }
    }
  }, {
    key: 'render',
    value: function render(cmd) {
      var opts = arguments.length <= 1 || arguments[1] === undefined ? { id: '' } : arguments[1];

      var self = this;
      var listItem = qs('[data-id="' + opts.id + '"]');

      // Do nothing if we haven't got the task id back
      // except on the first render ('init')
      // and when adding a new task ('addTask')
      if (!listItem && !(cmd === 'init' || 'addTask')) {
        return;
      }

      // Display error when receiving an error, do nothing else
      if (opts.err) {
        return self.displayError();
      }

      var commands = {
        init: function init() {
          self.itemCounter();
        },

        addTask: function addTask() {
          self.addTaskInput.value = '';

          var taskListItem = document.createElement('li');
          taskListItem.className = 'task-list__item';
          taskListItem.dataset.id = opts.id;
          var taskListItemView = document.createElement('div');
          taskListItemView.className = 'task-list__item--view';
          taskListItem.appendChild(taskListItemView);
          var taskListItemToogle = document.createElement('span');
          taskListItemToogle.className = 'task-list__item__toggle';
          taskListItemView.appendChild(taskListItemToogle);
          var taskListItemName = document.createElement('label');
          taskListItemName.className = 'task-list__item__name';
          taskListItemName.textContent = opts.title;
          taskListItemView.appendChild(taskListItemName);
          var taskListItemDelete = document.createElement('button');
          taskListItemDelete.className = 'task-list__item__delete';
          taskListItemView.appendChild(taskListItemDelete);

          self.taskList.appendChild(taskListItem);
          self.itemCounter();
        },

        editTask: function editTask() {
          var input = document.createElement('input');
          var currVal = qs('label', listItem).textContent;
          self.oldValCache = currVal;

          listItem.className = listItem.className + ' editing';
          input.className = 'task-list__item--edit';
          listItem.appendChild(input);
          input.focus();
          input.value = currVal;
        },

        editTaskDone: function editTaskDone() {
          var input = qs('.task-list__item--edit', listItem);
          var label = qs('.task-list__item__name', listItem);

          listItem.removeChild(input);
          listItem.className = listItem.className.replace('editing', '');
          label.textContent = opts.title;
        },

        removeTask: function removeTask() {
          opts.query.forEach(function (v) {
            var item = qs('[data-id="' + v + '"]');
            self.taskList.removeChild(item);
          });

          return self.itemCounter();
        },

        toggleTask: function toggleTask() {
          if (opts.completed) {
            listItem.className = 'task-list__item completed';
          } else {
            listItem.className = 'task-list__item';
          }

          self.itemCounter();
        }
      };

      commands[cmd]();
    }
  }]);

  return View;
})();

exports['default'] = View;
module.exports = exports['default'];

},{}]},{},[1]);
